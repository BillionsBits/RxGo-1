package rxgo

type sliceIterable(type T) struct {
	items [](Item(T))
	opts  [](Option(T))
}

func newSliceIterable(items [](Item(T)), opts ...Option) Iterable {
	return &sliceIterable{
		items: items,
		opts:  opts,
	}
}

func (i *sliceIterable) Observe(opts ...Option(T)) <-chan(Item(T)) {
	option := parseOptions(append(i.opts, opts...)...)
	next := option.buildChannel()

	go func() {
		for _, item := range i.items {
			next <- item
		}
		close(next)
	}()
	return next
}
